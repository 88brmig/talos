# commit to be tagged for new release
commit = "HEAD"

project_name = "Talos"
github_repo = "siderolabs/talos"
match_deps = "^github.com/((talos-systems|siderolabs)/[a-zA-Z0-9-]+)$"

# previous release
previous = "v1.4.0"

pre_release = true

preface = """\
"""

[notes]

    [notes.updates]
        title = "Component Updates"
        description="""\
* Linux: 6.1.37
* containerd: 1.6.21
* runc: 1.1.7
* etcd: 3.5.9
* Kubernetes: 1.28.0-alpha.4
* Flannel: 0.22.0

Talos is built with Go 1.20.5.
"""

    [notes.quota]
        title = "XFS Quota"
        description="""\
Talos 1.5+ enables XFS project quota support by default, also enabling by default
kubelet feature gate `LocalStorageCapacityIsolationFSQuotaMonitoring` to use xfs quotas
to monitor volume usage instead of `du`.

This feature is controlled by the `.machine.features.diskQuotaSupport` field in the machine config,
it is set to true for new clusters.

When upgrading from a previous version, the feature can be enabled by setting the field to true.
On the first mount of a volume, the quota information will be recalculated, which may take some time.
"""

    [notes.ifnames]
        title = "Predictable Network Interface Names"
        description="""\
Starting with version Talos 1.5, network interfaces are renamed to [predictable names](https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/)
same way as `systemd` does that in other Linux distributions.

The naming schema `enx78e7d1ea46da` (based on MAC addresses) is enabled by default, the order of interface naming decisions is:

* firmware/BIOS provided index numbers for on-board devices (example: `eno1`)
* firmware/BIOS provided PCI Express hotplug slot index numbers (example: `ens1`)
* physical/geographical location of the connector of the hardware (example: `enp2s0`)
* interfaces's MAC address (example: `enx78e7d1ea46da`)

The predictable network interface names features can be disabled by specifying `net.ifnames=0` in the kernel command line.
Talos automatically adds the `net.ifnames=0` kernel argument when upgrading from Talos versions before 1.5.

This change doesn't affect "cloud" platforms, like AWS, as Talos automatically adds `net.ifnames=0` to the kernel command line.
"""

    [notes.machineconfig]
        title = "Machine Config option `.machine.install.bootloader`"
        description="""\
The `.machine.install.bootloader` option in the machine config is deprecated and will be removed in Talos 1.6.
This was a no-op for a long time. The bootloader is always installed.
"""

    [notes.rdma-rxe]
        title = "RDMA/RoCE support"
        description="""\
Talos no longer loads by default `rdma_rxe` Linux driver, which is required for RoCE support.
If the driver is required, it can be enabled by specifying `rdma_rxe` in the `.machine.kernel.modules` field in the machine config.
"""

    [notes.api-server-loadbalancer]
        title = "Kubernetes API Server In-Cluster Load Balancer"
        description="""\
Talos now supports configuring the Kubernetes API Server in-cluster load balancer with machine config
`features.apiServerBalancerSupport.port` and `features.apiServerBalancerSupport.enabled` fields.

If enabled, the loadbalancer binds to `localhost` and runs on the same port on every machine in the cluster.
The default value for loadbalancer endpoint is https://localhost:7445.

The in-cluster loadbalancer endpoint is used by the `kubelet`, `kube-scheduler`, `kube-controller-manager`
and `kube-proxy` by default and can be passed to the CNIs like Cilium and Calico.

The in-cluster loadbalancer provides access to the Kubernetes API endpoint even if the external loadbalancer
is not healthy, provided that the worker nodes can reach to the controlplane machine addresses directly.
"""

    [notes.secureboot]
        title = "SecureBoot"
        description="""\
Talos now supports generating a custom iso that can be used with SecureBoot. Key generation and enrolling has to be done manually.
"""

    [notes.extensions]
        title = "Extension Services"
        description="""\
Talos now supports setting `environmentFile` for an extension service container spec. Refer: https://www.talos.dev/v1.5/advanced/extension-services/#container
The extension waits for the file to be present before starting the service.
"""

    [notes.kms-encryption-keys]
        title = "Network KMS Disk Encryption"
        description="""\
Talos now supports new type of encryption keys which are sealed/unsealed with an external KMS server:

```
systemDiskEncryption:
  ephemeral:
    keys:
      - kms:
          endpoint: https://1.2.3.4:443
        slot: 0
```
gRPC API definitions and a simple reference implementation of the KMS server can be found in this
[repository](https://github.com/siderolabs/kms-client/blob/main/cmd/kms-server/main.go).
"""

    [notes.talosctl-images]
        title = "`talosctl images` Command"
        description="""\
The command `talosctl images` was renamed to `talosctl image default`.

The backward-compatible alias is kept in Talos 1.5, but it will be dropped in Talos 1.6.
"""

    [notes.talosctl-image]
        title = "`talosctl image` Command"
        description="""\
A new set of commands was introduced to manage container images in the CRI:

* `talosctl image list` shows list of available images
* `talosctl image pull` allows to pre-pull an image into the CRI

Both new commands accept `--namespace` flag with two possible values:

* `cri` (default): images managed by the CRI (Kubernetes workloads)
* `system`: images managed by Talos (`etcd` and `kubelet`)
```
"""

    [notes.upgrade-k8s]
        title = "`talosctl upgrade-k8s` Image Pre-pulling"
        description="""\
The command `talosctl upgrade-k8s` now by default pre-pulls images for Kubernetes controlplane components
and kubelet. This provides an early check for missing images, and minimizes downtime during Kubernetes
rolling component update.
"""

[make_deps]

    [make_deps.tools]
        variable = "TOOLS"
        repository = "github.com/siderolabs/tools"

    [make_deps.pkgs]
        variable = "PKGS"
        repository = "github.com/siderolabs/pkgs"

    [make_deps.extras]
        variable = "EXTRAS"
        repository = "github.com/siderolabs/extras"
