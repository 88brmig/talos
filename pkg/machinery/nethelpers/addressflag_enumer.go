// Code generated by "enumer -type=AddressFlag -linecomment -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
	"strings"
)

const _AddressFlagName = "temporarynodadoptimisticdadfailedhomeaddressdeprecatedtentativepermanentmngmtmpaddrnoprefixroutemcautojoinstableprivacy"
const _AddressFlagLowerName = "temporarynodadoptimisticdadfailedhomeaddressdeprecatedtentativepermanentmngmtmpaddrnoprefixroutemcautojoinstableprivacy"

var _AddressFlagMap = map[AddressFlag]string{
	1:    _AddressFlagName[0:9],
	2:    _AddressFlagName[9:14],
	4:    _AddressFlagName[14:24],
	8:    _AddressFlagName[24:33],
	16:   _AddressFlagName[33:44],
	32:   _AddressFlagName[44:54],
	64:   _AddressFlagName[54:63],
	128:  _AddressFlagName[63:72],
	256:  _AddressFlagName[72:83],
	512:  _AddressFlagName[83:96],
	1024: _AddressFlagName[96:106],
	2048: _AddressFlagName[106:119],
}

func (i AddressFlag) String() string {
	if str, ok := _AddressFlagMap[i]; ok {
		return str
	}
	return fmt.Sprintf("AddressFlag(%d)", i)
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AddressFlagNoOp() {
	var x [1]struct{}
	_ = x[AddressTemporary-(1)]
	_ = x[AddressNoDAD-(2)]
	_ = x[AddressOptimistic-(4)]
	_ = x[AddressDADFailed-(8)]
	_ = x[AddressHome-(16)]
	_ = x[AddressDeprecated-(32)]
	_ = x[AddressTentative-(64)]
	_ = x[AddressPermanent-(128)]
	_ = x[AddressManagementTemp-(256)]
	_ = x[AddressNoPrefixRoute-(512)]
	_ = x[AddressMCAutoJoin-(1024)]
	_ = x[AddressStablePrivacy-(2048)]
}

var _AddressFlagValues = []AddressFlag{AddressTemporary, AddressNoDAD, AddressOptimistic, AddressDADFailed, AddressHome, AddressDeprecated, AddressTentative, AddressPermanent, AddressManagementTemp, AddressNoPrefixRoute, AddressMCAutoJoin, AddressStablePrivacy}

var _AddressFlagNameToValueMap = map[string]AddressFlag{
	_AddressFlagName[0:9]:          AddressTemporary,
	_AddressFlagLowerName[0:9]:     AddressTemporary,
	_AddressFlagName[9:14]:         AddressNoDAD,
	_AddressFlagLowerName[9:14]:    AddressNoDAD,
	_AddressFlagName[14:24]:        AddressOptimistic,
	_AddressFlagLowerName[14:24]:   AddressOptimistic,
	_AddressFlagName[24:33]:        AddressDADFailed,
	_AddressFlagLowerName[24:33]:   AddressDADFailed,
	_AddressFlagName[33:44]:        AddressHome,
	_AddressFlagLowerName[33:44]:   AddressHome,
	_AddressFlagName[44:54]:        AddressDeprecated,
	_AddressFlagLowerName[44:54]:   AddressDeprecated,
	_AddressFlagName[54:63]:        AddressTentative,
	_AddressFlagLowerName[54:63]:   AddressTentative,
	_AddressFlagName[63:72]:        AddressPermanent,
	_AddressFlagLowerName[63:72]:   AddressPermanent,
	_AddressFlagName[72:83]:        AddressManagementTemp,
	_AddressFlagLowerName[72:83]:   AddressManagementTemp,
	_AddressFlagName[83:96]:        AddressNoPrefixRoute,
	_AddressFlagLowerName[83:96]:   AddressNoPrefixRoute,
	_AddressFlagName[96:106]:       AddressMCAutoJoin,
	_AddressFlagLowerName[96:106]:  AddressMCAutoJoin,
	_AddressFlagName[106:119]:      AddressStablePrivacy,
	_AddressFlagLowerName[106:119]: AddressStablePrivacy,
}

var _AddressFlagNames = []string{
	_AddressFlagName[0:9],
	_AddressFlagName[9:14],
	_AddressFlagName[14:24],
	_AddressFlagName[24:33],
	_AddressFlagName[33:44],
	_AddressFlagName[44:54],
	_AddressFlagName[54:63],
	_AddressFlagName[63:72],
	_AddressFlagName[72:83],
	_AddressFlagName[83:96],
	_AddressFlagName[96:106],
	_AddressFlagName[106:119],
}

// AddressFlagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AddressFlagString(s string) (AddressFlag, error) {
	if val, ok := _AddressFlagNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AddressFlagNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AddressFlag values", s)
}

// AddressFlagValues returns all values of the enum
func AddressFlagValues() []AddressFlag {
	return _AddressFlagValues
}

// AddressFlagStrings returns a slice of all String values of the enum
func AddressFlagStrings() []string {
	strs := make([]string, len(_AddressFlagNames))
	copy(strs, _AddressFlagNames)
	return strs
}

// IsAAddressFlag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AddressFlag) IsAAddressFlag() bool {
	_, ok := _AddressFlagMap[i]
	return ok
}

// MarshalText implements the encoding.TextMarshaler interface for AddressFlag
func (i AddressFlag) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AddressFlag
func (i *AddressFlag) UnmarshalText(text []byte) error {
	var err error
	*i, err = AddressFlagString(string(text))
	return err
}
