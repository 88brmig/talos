// Code generated by "enumer -type=VLANProtocol -linecomment -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
	"strings"
)

const (
	_VLANProtocolName_0      = "802.1q"
	_VLANProtocolLowerName_0 = "802.1q"
	_VLANProtocolName_1      = "802.1ad"
	_VLANProtocolLowerName_1 = "802.1ad"
)

var (
	_VLANProtocolIndex_0 = [...]uint8{0, 6}
	_VLANProtocolIndex_1 = [...]uint8{0, 7}
)

func (i VLANProtocol) String() string {
	switch {
	case i == 33024:
		return _VLANProtocolName_0
	case i == 34984:
		return _VLANProtocolName_1
	default:
		return fmt.Sprintf("VLANProtocol(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VLANProtocolNoOp() {
	var x [1]struct{}
	_ = x[VLANProtocol8021Q-(33024)]
	_ = x[VLANProtocol8021AD-(34984)]
}

var _VLANProtocolValues = []VLANProtocol{VLANProtocol8021Q, VLANProtocol8021AD}

var _VLANProtocolNameToValueMap = map[string]VLANProtocol{
	_VLANProtocolName_0[0:6]:      VLANProtocol8021Q,
	_VLANProtocolLowerName_0[0:6]: VLANProtocol8021Q,
	_VLANProtocolName_1[0:7]:      VLANProtocol8021AD,
	_VLANProtocolLowerName_1[0:7]: VLANProtocol8021AD,
}

var _VLANProtocolNames = []string{
	_VLANProtocolName_0[0:6],
	_VLANProtocolName_1[0:7],
}

// VLANProtocolString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VLANProtocolString(s string) (VLANProtocol, error) {
	if val, ok := _VLANProtocolNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VLANProtocolNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VLANProtocol values", s)
}

// VLANProtocolValues returns all values of the enum
func VLANProtocolValues() []VLANProtocol {
	return _VLANProtocolValues
}

// VLANProtocolStrings returns a slice of all String values of the enum
func VLANProtocolStrings() []string {
	strs := make([]string, len(_VLANProtocolNames))
	copy(strs, _VLANProtocolNames)
	return strs
}

// IsAVLANProtocol returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VLANProtocol) IsAVLANProtocol() bool {
	for _, v := range _VLANProtocolValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for VLANProtocol
func (i VLANProtocol) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for VLANProtocol
func (i *VLANProtocol) UnmarshalText(text []byte) error {
	var err error
	*i, err = VLANProtocolString(string(text))
	return err
}
