// Code generated by "enumer -type=BondMode -linecomment -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
	"strings"
)

const _BondModeName = "balance-rractive-backupbalance-xorbroadcast802.3adbalance-tlbbalance-alb"

var _BondModeIndex = [...]uint8{0, 10, 23, 34, 43, 50, 61, 72}

const _BondModeLowerName = "balance-rractive-backupbalance-xorbroadcast802.3adbalance-tlbbalance-alb"

func (i BondMode) String() string {
	if i >= BondMode(len(_BondModeIndex)-1) {
		return fmt.Sprintf("BondMode(%d)", i)
	}
	return _BondModeName[_BondModeIndex[i]:_BondModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BondModeNoOp() {
	var x [1]struct{}
	_ = x[BondModeRoundrobin-(0)]
	_ = x[BondModeActiveBackup-(1)]
	_ = x[BondModeXOR-(2)]
	_ = x[BondModeBroadcast-(3)]
	_ = x[BondMode8023AD-(4)]
	_ = x[BondModeTLB-(5)]
	_ = x[BondModeALB-(6)]
}

var _BondModeValues = []BondMode{BondModeRoundrobin, BondModeActiveBackup, BondModeXOR, BondModeBroadcast, BondMode8023AD, BondModeTLB, BondModeALB}

var _BondModeNameToValueMap = map[string]BondMode{
	_BondModeName[0:10]:       BondModeRoundrobin,
	_BondModeLowerName[0:10]:  BondModeRoundrobin,
	_BondModeName[10:23]:      BondModeActiveBackup,
	_BondModeLowerName[10:23]: BondModeActiveBackup,
	_BondModeName[23:34]:      BondModeXOR,
	_BondModeLowerName[23:34]: BondModeXOR,
	_BondModeName[34:43]:      BondModeBroadcast,
	_BondModeLowerName[34:43]: BondModeBroadcast,
	_BondModeName[43:50]:      BondMode8023AD,
	_BondModeLowerName[43:50]: BondMode8023AD,
	_BondModeName[50:61]:      BondModeTLB,
	_BondModeLowerName[50:61]: BondModeTLB,
	_BondModeName[61:72]:      BondModeALB,
	_BondModeLowerName[61:72]: BondModeALB,
}

var _BondModeNames = []string{
	_BondModeName[0:10],
	_BondModeName[10:23],
	_BondModeName[23:34],
	_BondModeName[34:43],
	_BondModeName[43:50],
	_BondModeName[50:61],
	_BondModeName[61:72],
}

// BondModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BondModeString(s string) (BondMode, error) {
	if val, ok := _BondModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BondModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BondMode values", s)
}

// BondModeValues returns all values of the enum
func BondModeValues() []BondMode {
	return _BondModeValues
}

// BondModeStrings returns a slice of all String values of the enum
func BondModeStrings() []string {
	strs := make([]string, len(_BondModeNames))
	copy(strs, _BondModeNames)
	return strs
}

// IsABondMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BondMode) IsABondMode() bool {
	for _, v := range _BondModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for BondMode
func (i BondMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for BondMode
func (i *BondMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = BondModeString(string(text))
	return err
}
