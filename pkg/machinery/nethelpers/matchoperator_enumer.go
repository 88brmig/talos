// Code generated by "enumer -type=MatchOperator -linecomment -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
)

const _MatchOperatorName = "==!="

var _MatchOperatorIndex = [...]uint8{0, 2, 4}

func (i MatchOperator) String() string {
	if i < 0 || i >= MatchOperator(len(_MatchOperatorIndex)-1) {
		return fmt.Sprintf("MatchOperator(%d)", i)
	}
	return _MatchOperatorName[_MatchOperatorIndex[i]:_MatchOperatorIndex[i+1]]
}

var _MatchOperatorValues = []MatchOperator{0, 1}

var _MatchOperatorNameToValueMap = map[string]MatchOperator{
	_MatchOperatorName[0:2]: 0,
	_MatchOperatorName[2:4]: 1,
}

// MatchOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MatchOperatorString(s string) (MatchOperator, error) {
	if val, ok := _MatchOperatorNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MatchOperator values", s)
}

// MatchOperatorValues returns all values of the enum
func MatchOperatorValues() []MatchOperator {
	return _MatchOperatorValues
}

// IsAMatchOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MatchOperator) IsAMatchOperator() bool {
	for _, v := range _MatchOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for MatchOperator
func (i MatchOperator) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MatchOperator
func (i *MatchOperator) UnmarshalText(text []byte) error {
	var err error
	*i, err = MatchOperatorString(string(text))
	return err
}
