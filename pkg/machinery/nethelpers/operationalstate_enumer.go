// Code generated by "enumer -type=OperationalState -linecomment -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
	"strings"
)

const _OperationalStateName = "unknownnotPresentdownlowerLayerDowntestingdormantup"

var _OperationalStateIndex = [...]uint8{0, 7, 17, 21, 35, 42, 49, 51}

const _OperationalStateLowerName = "unknownnotpresentdownlowerlayerdowntestingdormantup"

func (i OperationalState) String() string {
	if i >= OperationalState(len(_OperationalStateIndex)-1) {
		return fmt.Sprintf("OperationalState(%d)", i)
	}
	return _OperationalStateName[_OperationalStateIndex[i]:_OperationalStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OperationalStateNoOp() {
	var x [1]struct{}
	_ = x[OperStateUnknown-(0)]
	_ = x[OperStateNotPresent-(1)]
	_ = x[OperStateDown-(2)]
	_ = x[OperStateLowerLayerDown-(3)]
	_ = x[OperStateTesting-(4)]
	_ = x[OperStateDormant-(5)]
	_ = x[OperStateUp-(6)]
}

var _OperationalStateValues = []OperationalState{OperStateUnknown, OperStateNotPresent, OperStateDown, OperStateLowerLayerDown, OperStateTesting, OperStateDormant, OperStateUp}

var _OperationalStateNameToValueMap = map[string]OperationalState{
	_OperationalStateName[0:7]:        OperStateUnknown,
	_OperationalStateLowerName[0:7]:   OperStateUnknown,
	_OperationalStateName[7:17]:       OperStateNotPresent,
	_OperationalStateLowerName[7:17]:  OperStateNotPresent,
	_OperationalStateName[17:21]:      OperStateDown,
	_OperationalStateLowerName[17:21]: OperStateDown,
	_OperationalStateName[21:35]:      OperStateLowerLayerDown,
	_OperationalStateLowerName[21:35]: OperStateLowerLayerDown,
	_OperationalStateName[35:42]:      OperStateTesting,
	_OperationalStateLowerName[35:42]: OperStateTesting,
	_OperationalStateName[42:49]:      OperStateDormant,
	_OperationalStateLowerName[42:49]: OperStateDormant,
	_OperationalStateName[49:51]:      OperStateUp,
	_OperationalStateLowerName[49:51]: OperStateUp,
}

var _OperationalStateNames = []string{
	_OperationalStateName[0:7],
	_OperationalStateName[7:17],
	_OperationalStateName[17:21],
	_OperationalStateName[21:35],
	_OperationalStateName[35:42],
	_OperationalStateName[42:49],
	_OperationalStateName[49:51],
}

// OperationalStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OperationalStateString(s string) (OperationalState, error) {
	if val, ok := _OperationalStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OperationalStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OperationalState values", s)
}

// OperationalStateValues returns all values of the enum
func OperationalStateValues() []OperationalState {
	return _OperationalStateValues
}

// OperationalStateStrings returns a slice of all String values of the enum
func OperationalStateStrings() []string {
	strs := make([]string, len(_OperationalStateNames))
	copy(strs, _OperationalStateNames)
	return strs
}

// IsAOperationalState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OperationalState) IsAOperationalState() bool {
	for _, v := range _OperationalStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for OperationalState
func (i OperationalState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OperationalState
func (i *OperationalState) UnmarshalText(text []byte) error {
	var err error
	*i, err = OperationalStateString(string(text))
	return err
}
