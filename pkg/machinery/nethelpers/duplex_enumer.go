// Code generated by "enumer -type=Duplex -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
	"strings"
)

const (
	_DuplexName_0      = "HalfFull"
	_DuplexLowerName_0 = "halffull"
	_DuplexName_1      = "Unknown"
	_DuplexLowerName_1 = "unknown"
)

var (
	_DuplexIndex_0 = [...]uint8{0, 4, 8}
	_DuplexIndex_1 = [...]uint8{0, 7}
)

func (i Duplex) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _DuplexName_0[_DuplexIndex_0[i]:_DuplexIndex_0[i+1]]
	case i == 255:
		return _DuplexName_1
	default:
		return fmt.Sprintf("Duplex(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DuplexNoOp() {
	var x [1]struct{}
	_ = x[Half-(0)]
	_ = x[Full-(1)]
	_ = x[Unknown-(255)]
}

var _DuplexValues = []Duplex{Half, Full, Unknown}

var _DuplexNameToValueMap = map[string]Duplex{
	_DuplexName_0[0:4]:      Half,
	_DuplexLowerName_0[0:4]: Half,
	_DuplexName_0[4:8]:      Full,
	_DuplexLowerName_0[4:8]: Full,
	_DuplexName_1[0:7]:      Unknown,
	_DuplexLowerName_1[0:7]: Unknown,
}

var _DuplexNames = []string{
	_DuplexName_0[0:4],
	_DuplexName_0[4:8],
	_DuplexName_1[0:7],
}

// DuplexString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DuplexString(s string) (Duplex, error) {
	if val, ok := _DuplexNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DuplexNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Duplex values", s)
}

// DuplexValues returns all values of the enum
func DuplexValues() []Duplex {
	return _DuplexValues
}

// DuplexStrings returns a slice of all String values of the enum
func DuplexStrings() []string {
	strs := make([]string, len(_DuplexNames))
	copy(strs, _DuplexNames)
	return strs
}

// IsADuplex returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Duplex) IsADuplex() bool {
	for _, v := range _DuplexValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Duplex
func (i Duplex) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Duplex
func (i *Duplex) UnmarshalText(text []byte) error {
	var err error
	*i, err = DuplexString(string(text))
	return err
}
