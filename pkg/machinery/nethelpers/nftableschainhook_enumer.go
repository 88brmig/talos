// Code generated by "enumer -type=NfTablesChainHook -linecomment -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
)

const _NfTablesChainHookName = "preroutinginputforwardoutputpostrouting"

var _NfTablesChainHookIndex = [...]uint8{0, 10, 15, 22, 28, 39}

func (i NfTablesChainHook) String() string {
	if i >= NfTablesChainHook(len(_NfTablesChainHookIndex)-1) {
		return fmt.Sprintf("NfTablesChainHook(%d)", i)
	}
	return _NfTablesChainHookName[_NfTablesChainHookIndex[i]:_NfTablesChainHookIndex[i+1]]
}

var _NfTablesChainHookValues = []NfTablesChainHook{0, 1, 2, 3, 4}

var _NfTablesChainHookNameToValueMap = map[string]NfTablesChainHook{
	_NfTablesChainHookName[0:10]:  0,
	_NfTablesChainHookName[10:15]: 1,
	_NfTablesChainHookName[15:22]: 2,
	_NfTablesChainHookName[22:28]: 3,
	_NfTablesChainHookName[28:39]: 4,
}

// NfTablesChainHookString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NfTablesChainHookString(s string) (NfTablesChainHook, error) {
	if val, ok := _NfTablesChainHookNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NfTablesChainHook values", s)
}

// NfTablesChainHookValues returns all values of the enum
func NfTablesChainHookValues() []NfTablesChainHook {
	return _NfTablesChainHookValues
}

// IsANfTablesChainHook returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NfTablesChainHook) IsANfTablesChainHook() bool {
	for _, v := range _NfTablesChainHookValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for NfTablesChainHook
func (i NfTablesChainHook) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for NfTablesChainHook
func (i *NfTablesChainHook) UnmarshalText(text []byte) error {
	var err error
	*i, err = NfTablesChainHookString(string(text))
	return err
}
