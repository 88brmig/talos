// Code generated by "enumer -type=Status -linecomment -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
	"strings"
)

const _StatusName = "addressesconnectivityhostnameetcfiles"

var _StatusIndex = [...]uint8{0, 9, 21, 29, 37}

const _StatusLowerName = "addressesconnectivityhostnameetcfiles"

func (i Status) String() string {
	i -= 1
	if i < 0 || i >= Status(len(_StatusIndex)-1) {
		return fmt.Sprintf("Status(%d)", i+1)
	}
	return _StatusName[_StatusIndex[i]:_StatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusNoOp() {
	var x [1]struct{}
	_ = x[StatusAddresses-(1)]
	_ = x[StatusConnectivity-(2)]
	_ = x[StatusHostname-(3)]
	_ = x[StatusEtcFiles-(4)]
}

var _StatusValues = []Status{StatusAddresses, StatusConnectivity, StatusHostname, StatusEtcFiles}

var _StatusNameToValueMap = map[string]Status{
	_StatusName[0:9]:        StatusAddresses,
	_StatusLowerName[0:9]:   StatusAddresses,
	_StatusName[9:21]:       StatusConnectivity,
	_StatusLowerName[9:21]:  StatusConnectivity,
	_StatusName[21:29]:      StatusHostname,
	_StatusLowerName[21:29]: StatusHostname,
	_StatusName[29:37]:      StatusEtcFiles,
	_StatusLowerName[29:37]: StatusEtcFiles,
}

var _StatusNames = []string{
	_StatusName[0:9],
	_StatusName[9:21],
	_StatusName[21:29],
	_StatusName[29:37],
}

// StatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusString(s string) (Status, error) {
	if val, ok := _StatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Status values", s)
}

// StatusValues returns all values of the enum
func StatusValues() []Status {
	return _StatusValues
}

// StatusStrings returns a slice of all String values of the enum
func StatusStrings() []string {
	strs := make([]string, len(_StatusNames))
	copy(strs, _StatusNames)
	return strs
}

// IsAStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Status) IsAStatus() bool {
	for _, v := range _StatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Status
func (i Status) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Status
func (i *Status) UnmarshalText(text []byte) error {
	var err error
	*i, err = StatusString(string(text))
	return err
}
