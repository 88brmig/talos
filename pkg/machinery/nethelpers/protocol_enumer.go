// Code generated by "enumer -type=Protocol -linecomment -text"; DO NOT EDIT.

package nethelpers

import (
	"fmt"
	"strings"
)

const (
	_ProtocolName_0      = "icmp"
	_ProtocolLowerName_0 = "icmp"
	_ProtocolName_1      = "tcp"
	_ProtocolLowerName_1 = "tcp"
	_ProtocolName_2      = "udp"
	_ProtocolLowerName_2 = "udp"
	_ProtocolName_3      = "icmpv6"
	_ProtocolLowerName_3 = "icmpv6"
)

var (
	_ProtocolIndex_0 = [...]uint8{0, 4}
	_ProtocolIndex_1 = [...]uint8{0, 3}
	_ProtocolIndex_2 = [...]uint8{0, 3}
	_ProtocolIndex_3 = [...]uint8{0, 6}
)

func (i Protocol) String() string {
	switch {
	case i == 1:
		return _ProtocolName_0
	case i == 6:
		return _ProtocolName_1
	case i == 17:
		return _ProtocolName_2
	case i == 58:
		return _ProtocolName_3
	default:
		return fmt.Sprintf("Protocol(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ProtocolNoOp() {
	var x [1]struct{}
	_ = x[ProtocolICMP-(1)]
	_ = x[ProtocolTCP-(6)]
	_ = x[ProtocolUDP-(17)]
	_ = x[ProtocolICMPv6-(58)]
}

var _ProtocolValues = []Protocol{ProtocolICMP, ProtocolTCP, ProtocolUDP, ProtocolICMPv6}

var _ProtocolNameToValueMap = map[string]Protocol{
	_ProtocolName_0[0:4]:      ProtocolICMP,
	_ProtocolLowerName_0[0:4]: ProtocolICMP,
	_ProtocolName_1[0:3]:      ProtocolTCP,
	_ProtocolLowerName_1[0:3]: ProtocolTCP,
	_ProtocolName_2[0:3]:      ProtocolUDP,
	_ProtocolLowerName_2[0:3]: ProtocolUDP,
	_ProtocolName_3[0:6]:      ProtocolICMPv6,
	_ProtocolLowerName_3[0:6]: ProtocolICMPv6,
}

var _ProtocolNames = []string{
	_ProtocolName_0[0:4],
	_ProtocolName_1[0:3],
	_ProtocolName_2[0:3],
	_ProtocolName_3[0:6],
}

// ProtocolString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProtocolString(s string) (Protocol, error) {
	if val, ok := _ProtocolNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ProtocolNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Protocol values", s)
}

// ProtocolValues returns all values of the enum
func ProtocolValues() []Protocol {
	return _ProtocolValues
}

// ProtocolStrings returns a slice of all String values of the enum
func ProtocolStrings() []string {
	strs := make([]string, len(_ProtocolNames))
	copy(strs, _ProtocolNames)
	return strs
}

// IsAProtocol returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Protocol) IsAProtocol() bool {
	for _, v := range _ProtocolValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Protocol
func (i Protocol) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Protocol
func (i *Protocol) UnmarshalText(text []byte) error {
	var err error
	*i, err = ProtocolString(string(text))
	return err
}
