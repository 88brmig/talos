// Code generated by "enumer -type DiskFormat -linecomment -text"; DO NOT EDIT.

package profile

import (
	"fmt"
)

const _DiskFormatName = "unknownrawqcow2vhdova"

var _DiskFormatIndex = [...]uint8{0, 7, 10, 15, 18, 21}

func (i DiskFormat) String() string {
	if i < 0 || i >= DiskFormat(len(_DiskFormatIndex)-1) {
		return fmt.Sprintf("DiskFormat(%d)", i)
	}
	return _DiskFormatName[_DiskFormatIndex[i]:_DiskFormatIndex[i+1]]
}

var _DiskFormatValues = []DiskFormat{0, 1, 2, 3, 4}

var _DiskFormatNameToValueMap = map[string]DiskFormat{
	_DiskFormatName[0:7]:   0,
	_DiskFormatName[7:10]:  1,
	_DiskFormatName[10:15]: 2,
	_DiskFormatName[15:18]: 3,
	_DiskFormatName[18:21]: 4,
}

// DiskFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DiskFormatString(s string) (DiskFormat, error) {
	if val, ok := _DiskFormatNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DiskFormat values", s)
}

// DiskFormatValues returns all values of the enum
func DiskFormatValues() []DiskFormat {
	return _DiskFormatValues
}

// IsADiskFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DiskFormat) IsADiskFormat() bool {
	for _, v := range _DiskFormatValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for DiskFormat
func (i DiskFormat) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DiskFormat
func (i *DiskFormat) UnmarshalText(text []byte) error {
	var err error
	*i, err = DiskFormatString(string(text))
	return err
}
