// Code generated by "enumer -type SDBootEnrollKeys -linecomment -text"; DO NOT EDIT.

package profile

import (
	"fmt"
)

const _SDBootEnrollKeysName = "if-safemanualforceoff"

var _SDBootEnrollKeysIndex = [...]uint8{0, 7, 13, 18, 21}

func (i SDBootEnrollKeys) String() string {
	if i < 0 || i >= SDBootEnrollKeys(len(_SDBootEnrollKeysIndex)-1) {
		return fmt.Sprintf("SDBootEnrollKeys(%d)", i)
	}
	return _SDBootEnrollKeysName[_SDBootEnrollKeysIndex[i]:_SDBootEnrollKeysIndex[i+1]]
}

var _SDBootEnrollKeysValues = []SDBootEnrollKeys{0, 1, 2, 3}

var _SDBootEnrollKeysNameToValueMap = map[string]SDBootEnrollKeys{
	_SDBootEnrollKeysName[0:7]:   0,
	_SDBootEnrollKeysName[7:13]:  1,
	_SDBootEnrollKeysName[13:18]: 2,
	_SDBootEnrollKeysName[18:21]: 3,
}

// SDBootEnrollKeysString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SDBootEnrollKeysString(s string) (SDBootEnrollKeys, error) {
	if val, ok := _SDBootEnrollKeysNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SDBootEnrollKeys values", s)
}

// SDBootEnrollKeysValues returns all values of the enum
func SDBootEnrollKeysValues() []SDBootEnrollKeys {
	return _SDBootEnrollKeysValues
}

// IsASDBootEnrollKeys returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SDBootEnrollKeys) IsASDBootEnrollKeys() bool {
	for _, v := range _SDBootEnrollKeysValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for SDBootEnrollKeys
func (i SDBootEnrollKeys) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SDBootEnrollKeys
func (i *SDBootEnrollKeys) UnmarshalText(text []byte) error {
	var err error
	*i, err = SDBootEnrollKeysString(string(text))
	return err
}
