// Code generated by "enumer -type OutFormat -linecomment -text"; DO NOT EDIT.

package profile

import (
	"fmt"
)

const _OutFormatName = "unknownraw.tar.gz.xz.gz"

var _OutFormatIndex = [...]uint8{0, 7, 10, 17, 20, 23}

func (i OutFormat) String() string {
	if i < 0 || i >= OutFormat(len(_OutFormatIndex)-1) {
		return fmt.Sprintf("OutFormat(%d)", i)
	}
	return _OutFormatName[_OutFormatIndex[i]:_OutFormatIndex[i+1]]
}

var _OutFormatValues = []OutFormat{0, 1, 2, 3, 4}

var _OutFormatNameToValueMap = map[string]OutFormat{
	_OutFormatName[0:7]:   0,
	_OutFormatName[7:10]:  1,
	_OutFormatName[10:17]: 2,
	_OutFormatName[17:20]: 3,
	_OutFormatName[20:23]: 4,
}

// OutFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OutFormatString(s string) (OutFormat, error) {
	if val, ok := _OutFormatNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OutFormat values", s)
}

// OutFormatValues returns all values of the enum
func OutFormatValues() []OutFormat {
	return _OutFormatValues
}

// IsAOutFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OutFormat) IsAOutFormat() bool {
	for _, v := range _OutFormatValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for OutFormat
func (i OutFormat) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for OutFormat
func (i *OutFormat) UnmarshalText(text []byte) error {
	var err error
	*i, err = OutFormatString(string(text))
	return err
}
